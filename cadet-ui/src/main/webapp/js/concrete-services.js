//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Service_about_args = function(args) {
};
Service_about_args.prototype = {};
Service_about_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_about_args.prototype.write = function(output) {
  output.writeStructBegin('Service_about_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Service_about_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ServiceInfo(args.success);
    }
  }
};
Service_about_result.prototype = {};
Service_about_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ServiceInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_about_result.prototype.write = function(output) {
  output.writeStructBegin('Service_about_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Service_alive_args = function(args) {
};
Service_alive_args.prototype = {};
Service_alive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_alive_args.prototype.write = function(output) {
  output.writeStructBegin('Service_alive_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Service_alive_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Service_alive_result.prototype = {};
Service_alive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_alive_result.prototype.write = function(output) {
  output.writeStructBegin('Service_alive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ServiceClient.prototype = {};
ServiceClient.prototype.about = function(callback) {
  if (callback === undefined) {
    this.send_about();
    return this.recv_about();
  } else {
    var postData = this.send_about(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_about);
  }
};

ServiceClient.prototype.send_about = function(callback) {
  this.output.writeMessageBegin('about', Thrift.MessageType.CALL, this.seqid);
  var args = new Service_about_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ServiceClient.prototype.recv_about = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Service_about_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'about failed: unknown result';
};
ServiceClient.prototype.alive = function(callback) {
  if (callback === undefined) {
    this.send_alive();
    return this.recv_alive();
  } else {
    var postData = this.send_alive(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_alive);
  }
};

ServiceClient.prototype.send_alive = function(callback) {
  this.output.writeMessageBegin('alive', Thrift.MessageType.CALL, this.seqid);
  var args = new Service_alive_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ServiceClient.prototype.recv_alive = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Service_alive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'alive failed: unknown result';
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SendException = function(args) {
  this.message = null;
  this.serEx = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.serEx !== undefined && args.serEx !== null) {
      this.serEx = args.serEx;
    }
  }
};
Thrift.inherits(SendException, Thrift.TException);
SendException.prototype.name = 'SendException';
SendException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serEx = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendException.prototype.write = function(output) {
  output.writeStructBegin('SendException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serEx !== null && this.serEx !== undefined) {
    output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
    output.writeBinary(this.serEx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RetrieveException = function(args) {
  this.message = null;
  this.serEx = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.serEx !== undefined && args.serEx !== null) {
      this.serEx = args.serEx;
    }
  }
};
Thrift.inherits(RetrieveException, Thrift.TException);
RetrieveException.prototype.name = 'RetrieveException';
RetrieveException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serEx = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RetrieveException.prototype.write = function(output) {
  output.writeStructBegin('RetrieveException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serEx !== null && this.serEx !== undefined) {
    output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
    output.writeBinary(this.serEx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


RetrieveResults = function(args) {
  this.communications = null;
  if (args) {
    if (args.communications !== undefined && args.communications !== null) {
      this.communications = Thrift.copyList(args.communications, [Communication]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communications is unset!');
    }
  }
};
RetrieveResults.prototype = {};
RetrieveResults.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.communications = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Communication();
          elem6.read(input);
          this.communications.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RetrieveResults.prototype.write = function(output) {
  output.writeStructBegin('RetrieveResults');
  if (this.communications !== null && this.communications !== undefined) {
    output.writeFieldBegin('communications', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.communications.length);
    for (var iter7 in this.communications)
    {
      if (this.communications.hasOwnProperty(iter7))
      {
        iter7 = this.communications[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RetrieveRequest = function(args) {
  this.communicationIds = null;
  this.auths = null;
  if (args) {
    if (args.communicationIds !== undefined && args.communicationIds !== null) {
      this.communicationIds = Thrift.copyList(args.communicationIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationIds is unset!');
    }
    if (args.auths !== undefined && args.auths !== null) {
      this.auths = args.auths;
    }
  }
};
RetrieveRequest.prototype = {};
RetrieveRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.communicationIds = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.communicationIds.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.auths = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RetrieveRequest.prototype.write = function(output) {
  output.writeStructBegin('RetrieveRequest');
  if (this.communicationIds !== null && this.communicationIds !== undefined) {
    output.writeFieldBegin('communicationIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.communicationIds.length);
    for (var iter15 in this.communicationIds)
    {
      if (this.communicationIds.hasOwnProperty(iter15))
      {
        iter15 = this.communicationIds[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.auths !== null && this.auths !== undefined) {
    output.writeFieldBegin('auths', Thrift.Type.STRING, 2);
    output.writeString(this.auths);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ActiveLearnerClient_submitSort_args = function(args) {
  this.sessionId = null;
  this.unitIds = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.unitIds !== undefined && args.unitIds !== null) {
      this.unitIds = Thrift.copyList(args.unitIds, [AnnotationUnitIdentifier]);
    }
  }
};
ActiveLearnerClient_submitSort_args.prototype = {};
ActiveLearnerClient_submitSort_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.unitIds = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new AnnotationUnitIdentifier();
          elem22.read(input);
          this.unitIds.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerClient_submitSort_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerClient_submitSort_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.unitIds !== null && this.unitIds !== undefined) {
    output.writeFieldBegin('unitIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.unitIds.length);
    for (var iter23 in this.unitIds)
    {
      if (this.unitIds.hasOwnProperty(iter23))
      {
        iter23 = this.unitIds[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerClient_submitSort_result = function(args) {
};
ActiveLearnerClient_submitSort_result.prototype = {};
ActiveLearnerClient_submitSort_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerClient_submitSort_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerClient_submitSort_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerClientClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(ActiveLearnerClientClient, ServiceClient);
ActiveLearnerClientClient.prototype.submitSort = function(sessionId, unitIds, callback) {
  if (callback === undefined) {
    this.send_submitSort(sessionId, unitIds);
    this.recv_submitSort();
  } else {
    var postData = this.send_submitSort(sessionId, unitIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_submitSort);
  }
};

ActiveLearnerClientClient.prototype.send_submitSort = function(sessionId, unitIds, callback) {
  this.output.writeMessageBegin('submitSort', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerClient_submitSort_args();
  args.sessionId = sessionId;
  args.unitIds = unitIds;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerClientClient.prototype.recv_submitSort = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerClient_submitSort_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ActiveLearnerServer_start_args = function(args) {
  this.sessionId = null;
  this.task = null;
  this.contact = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.task !== undefined && args.task !== null) {
      this.task = new AnnotationTask(args.task);
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new AsyncContactInfo(args.contact);
    }
  }
};
ActiveLearnerServer_start_args.prototype = {};
ActiveLearnerServer_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.task = new AnnotationTask();
        this.task.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new AsyncContactInfo();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServer_start_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServer_start_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRUCT, 2);
    this.task.write(output);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 3);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServer_start_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ActiveLearnerServer_start_result.prototype = {};
ActiveLearnerServer_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServer_start_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServer_start_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServer_stop_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
  }
};
ActiveLearnerServer_stop_args.prototype = {};
ActiveLearnerServer_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServer_stop_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServer_stop_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServer_stop_result = function(args) {
};
ActiveLearnerServer_stop_result.prototype = {};
ActiveLearnerServer_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServer_stop_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServer_stop_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServer_addAnnotations_args = function(args) {
  this.sessionId = null;
  this.annotations = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [Annotation]);
    }
  }
};
ActiveLearnerServer_addAnnotations_args.prototype = {};
ActiveLearnerServer_addAnnotations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.annotations = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Annotation();
          elem14.read(input);
          this.annotations.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServer_addAnnotations_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServer_addAnnotations_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter15 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter15))
      {
        iter15 = this.annotations[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServer_addAnnotations_result = function(args) {
};
ActiveLearnerServer_addAnnotations_result.prototype = {};
ActiveLearnerServer_addAnnotations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServer_addAnnotations_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServer_addAnnotations_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(ActiveLearnerServerClient, ServiceClient);
ActiveLearnerServerClient.prototype.start = function(sessionId, task, contact, callback) {
  if (callback === undefined) {
    this.send_start(sessionId, task, contact);
    return this.recv_start();
  } else {
    var postData = this.send_start(sessionId, task, contact, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_start);
  }
};

ActiveLearnerServerClient.prototype.send_start = function(sessionId, task, contact, callback) {
  this.output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerServer_start_args();
  args.sessionId = sessionId;
  args.task = task;
  args.contact = contact;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerServerClient.prototype.recv_start = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerServer_start_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'start failed: unknown result';
};
ActiveLearnerServerClient.prototype.stop = function(sessionId, callback) {
  if (callback === undefined) {
    this.send_stop(sessionId);
    this.recv_stop();
  } else {
    var postData = this.send_stop(sessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_stop);
  }
};

ActiveLearnerServerClient.prototype.send_stop = function(sessionId, callback) {
  this.output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerServer_stop_args();
  args.sessionId = sessionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerServerClient.prototype.recv_stop = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerServer_stop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
ActiveLearnerServerClient.prototype.addAnnotations = function(sessionId, annotations, callback) {
  if (callback === undefined) {
    this.send_addAnnotations(sessionId, annotations);
    this.recv_addAnnotations();
  } else {
    var postData = this.send_addAnnotations(sessionId, annotations, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addAnnotations);
  }
};

ActiveLearnerServerClient.prototype.send_addAnnotations = function(sessionId, annotations, callback) {
  this.output.writeMessageBegin('addAnnotations', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerServer_addAnnotations_args();
  args.sessionId = sessionId;
  args.annotations = annotations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerServerClient.prototype.recv_addAnnotations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerServer_addAnnotations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Annotator_annotate_args = function(args) {
  this.original = null;
  if (args) {
    if (args.original !== undefined && args.original !== null) {
      this.original = new Communication(args.original);
    }
  }
};
Annotator_annotate_args.prototype = {};
Annotator_annotate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.original = new Communication();
        this.original.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_annotate_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_annotate_args');
  if (this.original !== null && this.original !== undefined) {
    output.writeFieldBegin('original', Thrift.Type.STRUCT, 1);
    this.original.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_annotate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ConcreteThriftException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Communication(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Annotator_annotate_result.prototype = {};
Annotator_annotate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Communication();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ConcreteThriftException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_annotate_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_annotate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getMetadata_args = function(args) {
};
Annotator_getMetadata_args.prototype = {};
Annotator_getMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getMetadata_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getMetadata_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AnnotationMetadata(args.success);
    }
  }
};
Annotator_getMetadata_result.prototype = {};
Annotator_getMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AnnotationMetadata();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getDocumentation_args = function(args) {
};
Annotator_getDocumentation_args.prototype = {};
Annotator_getDocumentation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getDocumentation_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getDocumentation_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getDocumentation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Annotator_getDocumentation_result.prototype = {};
Annotator_getDocumentation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getDocumentation_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getDocumentation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_shutdown_args = function(args) {
};
Annotator_shutdown_args.prototype = {};
Annotator_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_shutdown_result = function(args) {
};
Annotator_shutdown_result.prototype = {};
Annotator_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_shutdown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotatorClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AnnotatorClient.prototype = {};
AnnotatorClient.prototype.annotate = function(original, callback) {
  if (callback === undefined) {
    this.send_annotate(original);
    return this.recv_annotate();
  } else {
    var postData = this.send_annotate(original, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_annotate);
  }
};

AnnotatorClient.prototype.send_annotate = function(original, callback) {
  this.output.writeMessageBegin('annotate', Thrift.MessageType.CALL, this.seqid);
  var args = new Annotator_annotate_args();
  args.original = original;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotatorClient.prototype.recv_annotate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Annotator_annotate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'annotate failed: unknown result';
};
AnnotatorClient.prototype.getMetadata = function(callback) {
  if (callback === undefined) {
    this.send_getMetadata();
    return this.recv_getMetadata();
  } else {
    var postData = this.send_getMetadata(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMetadata);
  }
};

AnnotatorClient.prototype.send_getMetadata = function(callback) {
  this.output.writeMessageBegin('getMetadata', Thrift.MessageType.CALL, this.seqid);
  var args = new Annotator_getMetadata_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotatorClient.prototype.recv_getMetadata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Annotator_getMetadata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMetadata failed: unknown result';
};
AnnotatorClient.prototype.getDocumentation = function(callback) {
  if (callback === undefined) {
    this.send_getDocumentation();
    return this.recv_getDocumentation();
  } else {
    var postData = this.send_getDocumentation(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentation);
  }
};

AnnotatorClient.prototype.send_getDocumentation = function(callback) {
  this.output.writeMessageBegin('getDocumentation', Thrift.MessageType.CALL, this.seqid);
  var args = new Annotator_getDocumentation_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotatorClient.prototype.recv_getDocumentation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Annotator_getDocumentation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentation failed: unknown result';
};
AnnotatorClient.prototype.shutdown = function(callback) {
  if (callback === undefined) {
    this.send_shutdown();
  } else {
    var postData = this.send_shutdown(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_shutdown);
  }
};

AnnotatorClient.prototype.send_shutdown = function(callback) {
  this.output.writeMessageBegin('shutdown', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new Annotator_shutdown_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Feedback_startFeedback_args = function(args) {
  this.results = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = new SearchResults(args.results);
    }
  }
};
Feedback_startFeedback_args.prototype = {};
Feedback_startFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.results = new SearchResults();
        this.results.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Feedback_startFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('Feedback_startFeedback_args');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.STRUCT, 1);
    this.results.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Feedback_startFeedback_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Feedback_startFeedback_result.prototype = {};
Feedback_startFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Feedback_startFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('Feedback_startFeedback_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Feedback_addCommunicationFeedback_args = function(args) {
  this.searchResultsId = null;
  this.communicationId = null;
  this.feedback = null;
  if (args) {
    if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
      this.searchResultsId = new UUID(args.searchResultsId);
    }
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.feedback !== undefined && args.feedback !== null) {
      this.feedback = args.feedback;
    }
  }
};
Feedback_addCommunicationFeedback_args.prototype = {};
Feedback_addCommunicationFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultsId = new UUID();
        this.searchResultsId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.feedback = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Feedback_addCommunicationFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('Feedback_addCommunicationFeedback_args');
  if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
    output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
    this.searchResultsId.write(output);
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.feedback !== null && this.feedback !== undefined) {
    output.writeFieldBegin('feedback', Thrift.Type.I32, 3);
    output.writeI32(this.feedback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Feedback_addCommunicationFeedback_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Feedback_addCommunicationFeedback_result.prototype = {};
Feedback_addCommunicationFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Feedback_addCommunicationFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('Feedback_addCommunicationFeedback_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Feedback_addSentenceFeedback_args = function(args) {
  this.searchResultsId = null;
  this.communicationId = null;
  this.sentenceId = null;
  this.feedback = null;
  if (args) {
    if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
      this.searchResultsId = new UUID(args.searchResultsId);
    }
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.sentenceId !== undefined && args.sentenceId !== null) {
      this.sentenceId = new UUID(args.sentenceId);
    }
    if (args.feedback !== undefined && args.feedback !== null) {
      this.feedback = args.feedback;
    }
  }
};
Feedback_addSentenceFeedback_args.prototype = {};
Feedback_addSentenceFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultsId = new UUID();
        this.searchResultsId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sentenceId = new UUID();
        this.sentenceId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.feedback = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Feedback_addSentenceFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('Feedback_addSentenceFeedback_args');
  if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
    output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
    this.searchResultsId.write(output);
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.sentenceId !== null && this.sentenceId !== undefined) {
    output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 3);
    this.sentenceId.write(output);
    output.writeFieldEnd();
  }
  if (this.feedback !== null && this.feedback !== undefined) {
    output.writeFieldBegin('feedback', Thrift.Type.I32, 4);
    output.writeI32(this.feedback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Feedback_addSentenceFeedback_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Feedback_addSentenceFeedback_result.prototype = {};
Feedback_addSentenceFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Feedback_addSentenceFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('Feedback_addSentenceFeedback_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(FeedbackClient, ServiceClient);
FeedbackClient.prototype.startFeedback = function(results, callback) {
  if (callback === undefined) {
    this.send_startFeedback(results);
    this.recv_startFeedback();
  } else {
    var postData = this.send_startFeedback(results, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_startFeedback);
  }
};

FeedbackClient.prototype.send_startFeedback = function(results, callback) {
  this.output.writeMessageBegin('startFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new Feedback_startFeedback_args();
  args.results = results;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FeedbackClient.prototype.recv_startFeedback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Feedback_startFeedback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
FeedbackClient.prototype.addCommunicationFeedback = function(searchResultsId, communicationId, feedback, callback) {
  if (callback === undefined) {
    this.send_addCommunicationFeedback(searchResultsId, communicationId, feedback);
    this.recv_addCommunicationFeedback();
  } else {
    var postData = this.send_addCommunicationFeedback(searchResultsId, communicationId, feedback, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addCommunicationFeedback);
  }
};

FeedbackClient.prototype.send_addCommunicationFeedback = function(searchResultsId, communicationId, feedback, callback) {
  this.output.writeMessageBegin('addCommunicationFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new Feedback_addCommunicationFeedback_args();
  args.searchResultsId = searchResultsId;
  args.communicationId = communicationId;
  args.feedback = feedback;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FeedbackClient.prototype.recv_addCommunicationFeedback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Feedback_addCommunicationFeedback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
FeedbackClient.prototype.addSentenceFeedback = function(searchResultsId, communicationId, sentenceId, feedback, callback) {
  if (callback === undefined) {
    this.send_addSentenceFeedback(searchResultsId, communicationId, sentenceId, feedback);
    this.recv_addSentenceFeedback();
  } else {
    var postData = this.send_addSentenceFeedback(searchResultsId, communicationId, sentenceId, feedback, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSentenceFeedback);
  }
};

FeedbackClient.prototype.send_addSentenceFeedback = function(searchResultsId, communicationId, sentenceId, feedback, callback) {
  this.output.writeMessageBegin('addSentenceFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new Feedback_addSentenceFeedback_args();
  args.searchResultsId = searchResultsId;
  args.communicationId = communicationId;
  args.sentenceId = sentenceId;
  args.feedback = feedback;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FeedbackClient.prototype.recv_addSentenceFeedback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Feedback_addSentenceFeedback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


AnnotationTask = function(args) {
  this.type = null;
  this.language = null;
  this.unitType = null;
  this.units = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.unitType !== undefined && args.unitType !== null) {
      this.unitType = args.unitType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitType is unset!');
    }
    if (args.units !== undefined && args.units !== null) {
      this.units = Thrift.copyList(args.units, [AnnotationUnitIdentifier]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field units is unset!');
    }
  }
};
AnnotationTask.prototype = {};
AnnotationTask.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.unitType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.units = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new AnnotationUnitIdentifier();
          elem6.read(input);
          this.units.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationTask.prototype.write = function(output) {
  output.writeStructBegin('AnnotationTask');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.unitType !== null && this.unitType !== undefined) {
    output.writeFieldBegin('unitType', Thrift.Type.I32, 3);
    output.writeI32(this.unitType);
    output.writeFieldEnd();
  }
  if (this.units !== null && this.units !== undefined) {
    output.writeFieldBegin('units', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.units.length);
    for (var iter7 in this.units)
    {
      if (this.units.hasOwnProperty(iter7))
      {
        iter7 = this.units[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotation = function(args) {
  this.id = null;
  this.communication = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new AnnotationUnitIdentifier(args.id);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.communication !== undefined && args.communication !== null) {
      this.communication = new Communication(args.communication);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communication is unset!');
    }
  }
};
Annotation.prototype = {};
Annotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new AnnotationUnitIdentifier();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotation.prototype.write = function(output) {
  output.writeStructBegin('Annotation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 2);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ResultsServer_registerSearchResult_args = function(args) {
  this.results = null;
  this.taskType = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = new SearchResults(args.results);
    }
    if (args.taskType !== undefined && args.taskType !== null) {
      this.taskType = args.taskType;
    }
  }
};
ResultsServer_registerSearchResult_args.prototype = {};
ResultsServer_registerSearchResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.results = new SearchResults();
        this.results.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_registerSearchResult_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_registerSearchResult_args');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.STRUCT, 1);
    this.results.write(output);
    output.writeFieldEnd();
  }
  if (this.taskType !== null && this.taskType !== undefined) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 2);
    output.writeI32(this.taskType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_registerSearchResult_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_registerSearchResult_result.prototype = {};
ResultsServer_registerSearchResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_registerSearchResult_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_registerSearchResult_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getSearchResults_args = function(args) {
  this.taskType = null;
  this.limit = null;
  if (args) {
    if (args.taskType !== undefined && args.taskType !== null) {
      this.taskType = args.taskType;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
ResultsServer_getSearchResults_args.prototype = {};
ResultsServer_getSearchResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getSearchResults_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getSearchResults_args');
  if (this.taskType !== null && this.taskType !== undefined) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 1);
    output.writeI32(this.taskType);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 2);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getSearchResults_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SearchResults]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_getSearchResults_result.prototype = {};
ResultsServer_getSearchResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new SearchResults();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getSearchResults_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getSearchResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getSearchResultsByUser_args = function(args) {
  this.taskType = null;
  this.userId = null;
  this.limit = null;
  if (args) {
    if (args.taskType !== undefined && args.taskType !== null) {
      this.taskType = args.taskType;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
ResultsServer_getSearchResultsByUser_args.prototype = {};
ResultsServer_getSearchResultsByUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getSearchResultsByUser_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getSearchResultsByUser_args');
  if (this.taskType !== null && this.taskType !== undefined) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 1);
    output.writeI32(this.taskType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getSearchResultsByUser_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SearchResults]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_getSearchResultsByUser_result.prototype = {};
ResultsServer_getSearchResultsByUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new SearchResults();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getSearchResultsByUser_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getSearchResultsByUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getLatestSearchResult_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
ResultsServer_getLatestSearchResult_args.prototype = {};
ResultsServer_getLatestSearchResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getLatestSearchResult_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getLatestSearchResult_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getLatestSearchResult_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResults(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_getLatestSearchResult_result.prototype = {};
ResultsServer_getLatestSearchResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResults();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getLatestSearchResult_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getLatestSearchResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getSearchResult_args = function(args) {
  this.searchResultsId = null;
  if (args) {
    if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
      this.searchResultsId = new UUID(args.searchResultsId);
    }
  }
};
ResultsServer_getSearchResult_args.prototype = {};
ResultsServer_getSearchResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultsId = new UUID();
        this.searchResultsId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getSearchResult_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getSearchResult_args');
  if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
    output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
    this.searchResultsId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getSearchResult_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResults(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_getSearchResult_result.prototype = {};
ResultsServer_getSearchResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResults();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getSearchResult_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getSearchResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_startSession_args = function(args) {
  this.searchResultsId = null;
  if (args) {
    if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
      this.searchResultsId = new UUID(args.searchResultsId);
    }
  }
};
ResultsServer_startSession_args.prototype = {};
ResultsServer_startSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultsId = new UUID();
        this.searchResultsId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_startSession_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_startSession_args');
  if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
    output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
    this.searchResultsId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_startSession_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UUID(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_startSession_result.prototype = {};
ResultsServer_startSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UUID();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_startSession_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_startSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_stopSession_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
  }
};
ResultsServer_stopSession_args.prototype = {};
ResultsServer_stopSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_stopSession_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_stopSession_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_stopSession_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_stopSession_result.prototype = {};
ResultsServer_stopSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_stopSession_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_stopSession_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getNextChunk_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
  }
};
ResultsServer_getNextChunk_args.prototype = {};
ResultsServer_getNextChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getNextChunk_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getNextChunk_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_getNextChunk_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [AnnotationUnitIdentifier]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_getNextChunk_result.prototype = {};
ResultsServer_getNextChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new AnnotationUnitIdentifier();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_getNextChunk_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_getNextChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_submitAnnotation_args = function(args) {
  this.sessionId = null;
  this.unitId = null;
  this.communication = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.unitId !== undefined && args.unitId !== null) {
      this.unitId = new AnnotationUnitIdentifier(args.unitId);
    }
    if (args.communication !== undefined && args.communication !== null) {
      this.communication = new Communication(args.communication);
    }
  }
};
ResultsServer_submitAnnotation_args.prototype = {};
ResultsServer_submitAnnotation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unitId = new AnnotationUnitIdentifier();
        this.unitId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_submitAnnotation_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_submitAnnotation_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRUCT, 2);
    this.unitId.write(output);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 3);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServer_submitAnnotation_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServer_submitAnnotation_result.prototype = {};
ResultsServer_submitAnnotation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServer_submitAnnotation_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServer_submitAnnotation_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(ResultsServerClient, ServiceClient);
ResultsServerClient.prototype.registerSearchResult = function(results, taskType, callback) {
  if (callback === undefined) {
    this.send_registerSearchResult(results, taskType);
    this.recv_registerSearchResult();
  } else {
    var postData = this.send_registerSearchResult(results, taskType, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_registerSearchResult);
  }
};

ResultsServerClient.prototype.send_registerSearchResult = function(results, taskType, callback) {
  this.output.writeMessageBegin('registerSearchResult', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_registerSearchResult_args();
  args.results = results;
  args.taskType = taskType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_registerSearchResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_registerSearchResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
ResultsServerClient.prototype.getSearchResults = function(taskType, limit, callback) {
  if (callback === undefined) {
    this.send_getSearchResults(taskType, limit);
    return this.recv_getSearchResults();
  } else {
    var postData = this.send_getSearchResults(taskType, limit, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSearchResults);
  }
};

ResultsServerClient.prototype.send_getSearchResults = function(taskType, limit, callback) {
  this.output.writeMessageBegin('getSearchResults', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_getSearchResults_args();
  args.taskType = taskType;
  args.limit = limit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_getSearchResults = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_getSearchResults_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchResults failed: unknown result';
};
ResultsServerClient.prototype.getSearchResultsByUser = function(taskType, userId, limit, callback) {
  if (callback === undefined) {
    this.send_getSearchResultsByUser(taskType, userId, limit);
    return this.recv_getSearchResultsByUser();
  } else {
    var postData = this.send_getSearchResultsByUser(taskType, userId, limit, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSearchResultsByUser);
  }
};

ResultsServerClient.prototype.send_getSearchResultsByUser = function(taskType, userId, limit, callback) {
  this.output.writeMessageBegin('getSearchResultsByUser', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_getSearchResultsByUser_args();
  args.taskType = taskType;
  args.userId = userId;
  args.limit = limit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_getSearchResultsByUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_getSearchResultsByUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchResultsByUser failed: unknown result';
};
ResultsServerClient.prototype.getLatestSearchResult = function(userId, callback) {
  if (callback === undefined) {
    this.send_getLatestSearchResult(userId);
    return this.recv_getLatestSearchResult();
  } else {
    var postData = this.send_getLatestSearchResult(userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getLatestSearchResult);
  }
};

ResultsServerClient.prototype.send_getLatestSearchResult = function(userId, callback) {
  this.output.writeMessageBegin('getLatestSearchResult', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_getLatestSearchResult_args();
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_getLatestSearchResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_getLatestSearchResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLatestSearchResult failed: unknown result';
};
ResultsServerClient.prototype.getSearchResult = function(searchResultsId, callback) {
  if (callback === undefined) {
    this.send_getSearchResult(searchResultsId);
    return this.recv_getSearchResult();
  } else {
    var postData = this.send_getSearchResult(searchResultsId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSearchResult);
  }
};

ResultsServerClient.prototype.send_getSearchResult = function(searchResultsId, callback) {
  this.output.writeMessageBegin('getSearchResult', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_getSearchResult_args();
  args.searchResultsId = searchResultsId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_getSearchResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_getSearchResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchResult failed: unknown result';
};
ResultsServerClient.prototype.startSession = function(searchResultsId, callback) {
  if (callback === undefined) {
    this.send_startSession(searchResultsId);
    return this.recv_startSession();
  } else {
    var postData = this.send_startSession(searchResultsId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_startSession);
  }
};

ResultsServerClient.prototype.send_startSession = function(searchResultsId, callback) {
  this.output.writeMessageBegin('startSession', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_startSession_args();
  args.searchResultsId = searchResultsId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_startSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_startSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'startSession failed: unknown result';
};
ResultsServerClient.prototype.stopSession = function(sessionId, callback) {
  if (callback === undefined) {
    this.send_stopSession(sessionId);
    this.recv_stopSession();
  } else {
    var postData = this.send_stopSession(sessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_stopSession);
  }
};

ResultsServerClient.prototype.send_stopSession = function(sessionId, callback) {
  this.output.writeMessageBegin('stopSession', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_stopSession_args();
  args.sessionId = sessionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_stopSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_stopSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
ResultsServerClient.prototype.getNextChunk = function(sessionId, callback) {
  if (callback === undefined) {
    this.send_getNextChunk(sessionId);
    return this.recv_getNextChunk();
  } else {
    var postData = this.send_getNextChunk(sessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getNextChunk);
  }
};

ResultsServerClient.prototype.send_getNextChunk = function(sessionId, callback) {
  this.output.writeMessageBegin('getNextChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_getNextChunk_args();
  args.sessionId = sessionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_getNextChunk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_getNextChunk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNextChunk failed: unknown result';
};
ResultsServerClient.prototype.submitAnnotation = function(sessionId, unitId, communication, callback) {
  if (callback === undefined) {
    this.send_submitAnnotation(sessionId, unitId, communication);
    this.recv_submitAnnotation();
  } else {
    var postData = this.send_submitAnnotation(sessionId, unitId, communication, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_submitAnnotation);
  }
};

ResultsServerClient.prototype.send_submitAnnotation = function(sessionId, unitId, communication, callback) {
  this.output.writeMessageBegin('submitAnnotation', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServer_submitAnnotation_args();
  args.sessionId = sessionId;
  args.unitId = unitId;
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerClient.prototype.recv_submitAnnotation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServer_submitAnnotation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Retriever_retrieve_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new RetrieveRequest(args.request);
    }
  }
};
Retriever_retrieve_args.prototype = {};
Retriever_retrieve_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new RetrieveRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Retriever_retrieve_args.prototype.write = function(output) {
  output.writeStructBegin('Retriever_retrieve_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Retriever_retrieve_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RetrieveResults(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Retriever_retrieve_result.prototype = {};
Retriever_retrieve_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RetrieveResults();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Retriever_retrieve_result.prototype.write = function(output) {
  output.writeStructBegin('Retriever_retrieve_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RetrieverClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(RetrieverClient, ServiceClient);
RetrieverClient.prototype.retrieve = function(request, callback) {
  if (callback === undefined) {
    this.send_retrieve(request);
    return this.recv_retrieve();
  } else {
    var postData = this.send_retrieve(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_retrieve);
  }
};

RetrieverClient.prototype.send_retrieve = function(request, callback) {
  this.output.writeMessageBegin('retrieve', Thrift.MessageType.CALL, this.seqid);
  var args = new Retriever_retrieve_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

RetrieverClient.prototype.recv_retrieve = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Retriever_retrieve_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieve failed: unknown result';
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SearchType = {
  'COMMUNICATIONS' : 0,
  'SECTIONS' : 1,
  'SENTENCES' : 2,
  'ENTITIES' : 3,
  'ENTITY_MENTIONS' : 4,
  'SITUATIONS' : 5,
  'SITUATION_MENTIONS' : 6
};
SearchFeedback = {
  'NEGATIVE' : -1,
  'NONE' : 0,
  'POSITIVE' : 1
};
SearchQuery = function(args) {
  this.terms = null;
  this.questions = null;
  this.communicationId = null;
  this.tokens = null;
  this.rawQuery = null;
  this.auths = null;
  this.userId = null;
  this.name = null;
  this.labels = null;
  this.type = null;
  if (args) {
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = Thrift.copyList(args.terms, [null]);
    }
    if (args.questions !== undefined && args.questions !== null) {
      this.questions = Thrift.copyList(args.questions, [null]);
    }
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    }
    if (args.rawQuery !== undefined && args.rawQuery !== null) {
      this.rawQuery = args.rawQuery;
    }
    if (args.auths !== undefined && args.auths !== null) {
      this.auths = args.auths;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.labels !== undefined && args.labels !== null) {
      this.labels = Thrift.copyList(args.labels, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
SearchQuery.prototype = {};
SearchQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.terms = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.terms.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.questions = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.questions.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rawQuery = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.auths = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.labels = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readString().value;
          this.labels.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchQuery.prototype.write = function(output) {
  output.writeStructBegin('SearchQuery');
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.terms.length);
    for (var iter21 in this.terms)
    {
      if (this.terms.hasOwnProperty(iter21))
      {
        iter21 = this.terms[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.questions !== null && this.questions !== undefined) {
    output.writeFieldBegin('questions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.questions.length);
    for (var iter22 in this.questions)
    {
      if (this.questions.hasOwnProperty(iter22))
      {
        iter22 = this.questions[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 3);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.rawQuery !== null && this.rawQuery !== undefined) {
    output.writeFieldBegin('rawQuery', Thrift.Type.STRING, 5);
    output.writeString(this.rawQuery);
    output.writeFieldEnd();
  }
  if (this.auths !== null && this.auths !== undefined) {
    output.writeFieldBegin('auths', Thrift.Type.STRING, 6);
    output.writeString(this.auths);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 7);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 8);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.labels !== null && this.labels !== undefined) {
    output.writeFieldBegin('labels', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.labels.length);
    for (var iter23 in this.labels)
    {
      if (this.labels.hasOwnProperty(iter23))
      {
        iter23 = this.labels[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchResult = function(args) {
  this.communicationId = null;
  this.sentenceId = null;
  this.score = null;
  this.tokens = null;
  if (args) {
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.sentenceId !== undefined && args.sentenceId !== null) {
      this.sentenceId = new UUID(args.sentenceId);
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    }
  }
};
SearchResult.prototype = {};
SearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sentenceId = new UUID();
        this.sentenceId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchResult.prototype.write = function(output) {
  output.writeStructBegin('SearchResult');
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 1);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.sentenceId !== null && this.sentenceId !== undefined) {
    output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 2);
    this.sentenceId.write(output);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchResults = function(args) {
  this.uuid = null;
  this.searchQuery = null;
  this.searchResults = null;
  this.metadata = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.searchQuery !== undefined && args.searchQuery !== null) {
      this.searchQuery = new SearchQuery(args.searchQuery);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field searchQuery is unset!');
    }
    if (args.searchResults !== undefined && args.searchResults !== null) {
      this.searchResults = Thrift.copyList(args.searchResults, [SearchResult]);
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    }
  }
};
SearchResults.prototype = {};
SearchResults.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchQuery = new SearchQuery();
        this.searchQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.searchResults = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new SearchResult();
          elem30.read(input);
          this.searchResults.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchResults.prototype.write = function(output) {
  output.writeStructBegin('SearchResults');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.searchQuery !== null && this.searchQuery !== undefined) {
    output.writeFieldBegin('searchQuery', Thrift.Type.STRUCT, 2);
    this.searchQuery.write(output);
    output.writeFieldEnd();
  }
  if (this.searchResults !== null && this.searchResults !== undefined) {
    output.writeFieldBegin('searchResults', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.searchResults.length);
    for (var iter31 in this.searchResults)
    {
      if (this.searchResults.hasOwnProperty(iter31))
      {
        iter31 = this.searchResults[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 4);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Search_search_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = new SearchQuery(args.query);
    }
  }
};
Search_search_args.prototype = {};
Search_search_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new SearchQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Search_search_args.prototype.write = function(output) {
  output.writeStructBegin('Search_search_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Search_search_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResults(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Search_search_result.prototype = {};
Search_search_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResults();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Search_search_result.prototype.write = function(output) {
  output.writeStructBegin('Search_search_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(SearchClient, ServiceClient);
SearchClient.prototype.search = function(query, callback) {
  if (callback === undefined) {
    this.send_search(query);
    return this.recv_search();
  } else {
    var postData = this.send_search(query, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_search);
  }
};

SearchClient.prototype.send_search = function(query, callback) {
  this.output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid);
  var args = new Search_search_args();
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchClient.prototype.recv_search = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Search_search_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'search failed: unknown result';
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Sender_send_args = function(args) {
  this.communication = null;
  if (args) {
    if (args.communication !== undefined && args.communication !== null) {
      this.communication = new Communication(args.communication);
    }
  }
};
Sender_send_args.prototype = {};
Sender_send_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sender_send_args.prototype.write = function(output) {
  output.writeStructBegin('Sender_send_args');
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 1);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sender_send_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Sender_send_result.prototype = {};
Sender_send_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sender_send_result.prototype.write = function(output) {
  output.writeStructBegin('Sender_send_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SenderClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(SenderClient, ServiceClient);
SenderClient.prototype.send = function(communication, callback) {
  if (callback === undefined) {
    this.send_send(communication);
    this.recv_send();
  } else {
    var postData = this.send_send(communication, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_send);
  }
};

SenderClient.prototype.send_send = function(communication, callback) {
  this.output.writeMessageBegin('send', Thrift.MessageType.CALL, this.seqid);
  var args = new Sender_send_args();
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SenderClient.prototype.recv_send = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Sender_send_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


AnnotationTaskType = {
  'TRANSLATION' : 1,
  'NER' : 2
};
AnnotationUnitType = {
  'COMMUNICATION' : 1,
  'SENTENCE' : 2
};
ServicesException = function(args) {
  this.message = null;
  this.serEx = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.serEx !== undefined && args.serEx !== null) {
      this.serEx = args.serEx;
    }
  }
};
Thrift.inherits(ServicesException, Thrift.TException);
ServicesException.prototype.name = 'ServicesException';
ServicesException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serEx = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServicesException.prototype.write = function(output) {
  output.writeStructBegin('ServicesException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serEx !== null && this.serEx !== undefined) {
    output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
    output.writeBinary(this.serEx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AsyncContactInfo = function(args) {
  this.host = null;
  this.port = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field host is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
  }
};
AsyncContactInfo.prototype = {};
AsyncContactInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AsyncContactInfo.prototype.write = function(output) {
  output.writeStructBegin('AsyncContactInfo');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationUnitIdentifier = function(args) {
  this.communicationId = null;
  this.sentenceId = null;
  if (args) {
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationId is unset!');
    }
    if (args.sentenceId !== undefined && args.sentenceId !== null) {
      this.sentenceId = new UUID(args.sentenceId);
    }
  }
};
AnnotationUnitIdentifier.prototype = {};
AnnotationUnitIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sentenceId = new UUID();
        this.sentenceId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationUnitIdentifier.prototype.write = function(output) {
  output.writeStructBegin('AnnotationUnitIdentifier');
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 1);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.sentenceId !== null && this.sentenceId !== undefined) {
    output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 2);
    this.sentenceId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceInfo = function(args) {
  this.name = null;
  this.version = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
ServiceInfo.prototype = {};
ServiceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceInfo.prototype.write = function(output) {
  output.writeStructBegin('ServiceInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

